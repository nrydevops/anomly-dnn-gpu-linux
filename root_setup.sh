#!/bin/bash
apt-get update

apt-get install -y xorg # X display server https://en.wikipedia.org/wiki/X.Org_Server

# installing and configuring Nvidia GPU driver
apt-get install build-essential -y
curl -O http://us.download.nvidia.com/XFree86/Linux-x86_64/418.56/NVIDIA-Linux-x86_64-418.56.run
chmod +x ./NVIDIA-Linux-x86_64-418.56.run
./NVIDIA-Linux-x86_64-418.56.run -q -a -n -X -s

# xorg conf generated via nvidia-xconfig --allow-empty-initial-configuration
# overwriting xorg.conf adding the BusID where the video card is installed
cat << EOF > /etc/X11/xorg.conf
# nvidia-xconfig: X configuration file generated by nvidia-xconfig
# nvidia-xconfig:  version 367.57  (buildmeister@swio-display-x64-rhel04-13)  Mon Oct  3 21:42:19 PDT 2016

Section "ServerLayout"
    Identifier     "Layout0"
    Screen      0  "Screen0"
    InputDevice    "Keyboard0" "CoreKeyboard"
    InputDevice    "Mouse0" "CorePointer"
EndSection

Section "Files"
EndSection

Section "InputDevice"
    # generated from default
    Identifier     "Mouse0"
    Driver         "mouse"
    Option         "Protocol" "auto"
    Option         "Device" "/dev/psaux"
    Option         "Emulate3Buttons" "no"
    Option         "ZAxisMapping" "4 5"
EndSection

Section "InputDevice"
    # generated from default
    Identifier     "Keyboard0"
    Driver         "kbd"
EndSection

Section "Monitor"
    Identifier     "Monitor0"
    VendorName     "Unknown"
    ModelName      "Unknown"
    HorizSync       28.0 - 33.0
    VertRefresh     43.0 - 72.0
    Option         "DPMS"
EndSection

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BusID          "PCI:0000:00:0b.0" # THIS MAY CHANGE FROM INSTANCE TO INSTANCE,
    						          # check the device bus by running 'lspci | grep -i nvidia'
    						          # or lshw -C video
EndSection

Section "Screen"
    Identifier     "Screen0"
    Device         "Device0"
    Monitor        "Monitor0"
    DefaultDepth    24
    Option         "AllowEmptyInitialConfiguration" "True" # set by the --allow-empty-initial-configuration flag
    SubSection     "Display"
        Depth       24
    EndSubSection
EndSection
EOF

# Docker
apt install apt-transport-https ca-certificates curl software-properties-common -y
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable" -y
apt update -y
apt-cache policy docker-ce -y
apt install docker-ce -y
# 'systemctl status docker' to check the service status
# allow docker to be used without sudo - THIS REQUIRES TO LOGOUT AND LOGIN AGAIN!!!
usermod -aG docker ubuntu # assuming "ubuntu" is the user name

# Nvidia docker https://github.com/NVIDIA/nvidia-docker/wiki
export NVIDIADOCKER_VERSION=2.0.3
curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \
  apt-key add -
distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \
  tee /etc/apt/sources.list.d/nvidia-docker.list
apt-get update
apt-get install -y nvidia-docker2
pkill -SIGHUP dockerd
# Test nvidia-smi
docker run --runtime=nvidia --rm nvidia/cuda:9.0-base nvidia-smi

# Docker compose
curl -L https://github.com/docker/compose/releases/download/1.8.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
rm -f /usr/bin/docker-compose
ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

# Nvidia docker compose https://github.com/eywalker/nvidia-docker-compose
apt-get install python-pip -y
pip install --upgrade pip
pip install nvidia-docker-compose
